{"version":3,"sources":["webpack://DirectLine/webpack/universalModuleDefinition","webpack://DirectLine/webpack/bootstrap","webpack://DirectLine/./node_modules/botframework-schema/lib/index.js","webpack://DirectLine/./src/connectionStatus.ts","webpack://DirectLine/./src/directLine.ts"],"names":["ConnectionStatus","constructor","Object","isFrozen","Error","freeze","__NODE__","Function","Symbol","iterator","DirectLine","options","Uninitialized","WeakMap","conversationId","domain","isomorphicWS","pollingInterval","secret","streamUrl","token","watermark","useWebSocket","assign","status","Ended","pendingPromise","pendingResolvers","get","resolver","Promise","resolve","set","Connecting","connection","checkConnection","pollResponse","poll","postActivity","activity","connectionStatus","FailedToConnect","error","statusText","type","ActivityTypes","Message","attachments","length","postMessageWithAttachments","headers","url","response","fetch","method","body","JSON","stringify","ok","json","id","reconnect","conversation","end","socketConnection","close","getSesstionId","credentials","sessionId","Online","setTimeout","processError","activities","advancedWatermark","openSocketConnection","onmessage","event","parse","data","onclose","onerror","reconnectToConversation","onopen","startConversation","eTag","referenceGrammarId","expires_in","refreshTokenHeartbeat","expiry","tokenRefreshTimer","clearTimeout","doTokenRefresh","ExpiredToken","BotError","IndeterminateError","messageWithoutAttachments","FormData","append","attachmentResponses","all","map","attachment","contentUrl","forEach","index","blob","name","fileName","getFileNameFromPath","from","path","lastIndexOf","targetIndex","substr"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFa;AACb;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,CAAC,0DAA0D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sEAAsE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,4EAA4E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,CAAC,8FAA8F;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,CAAC,2FAA2F;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,6DAA6D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gEAAgE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,iGAAiG;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,qFAAqF;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,CAAC,sEAAsE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,CAAC,+HAA+H;AAChI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,CAAC,sHAAsH;AACvH,iC;;;;;;;;;;;;;;;;ACxOA,MAAMA,gBAAN,CAAuB;AACrB;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;;AAGA;;;AAKAC,aAAW,GAAG;AAAA;;AACZ,QAAIC,MAAM,CAACC,QAAP,CAAgBH,gBAAhB,CAAJ,EAAuC;AACrC,YAAM,IAAII,KAAJ,CAAU,wCAAV,CAAN;AACD;AACF;;AA3BoB;;gBAAjBJ,gB,cAEqB,IAAIA,gBAAJ,E;;gBAFrBA,gB,gBAIuB,IAAIA,gBAAJ,E;;gBAJvBA,gB,WAMkB,IAAIA,gBAAJ,E;;gBANlBA,gB,kBAQyB,IAAIA,gBAAJ,E;;gBARzBA,gB,qBAU4B,IAAIA,gBAAJ,E;;gBAV5BA,gB,wBAY+B,IAAIA,gBAAJ,E;;gBAZ/BA,gB,YAcmB,IAAIA,gBAAJ,E;;gBAd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","file":"./index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"DirectLine\"] = factory();\n\telse\n\t\troot[\"DirectLine\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/directLine.ts\");\n","\"use strict\";\n/*\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Defines values for RoleTypes.\n * Possible values include: 'user', 'bot'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: RoleTypes = <RoleTypes>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nvar RoleTypes;\n(function (RoleTypes) {\n    RoleTypes[\"User\"] = \"user\";\n    RoleTypes[\"Bot\"] = \"bot\";\n})(RoleTypes = exports.RoleTypes || (exports.RoleTypes = {}));\n/**\n * Defines values for ActivityTypes.\n * Possible values include: 'message', 'contactRelationUpdate',\n * 'conversationUpdate', 'typing', 'endOfConversation', 'event', 'invoke',\n * 'deleteUserData', 'messageUpdate', 'messageDelete', 'installationUpdate',\n * 'messageReaction', 'suggestion', 'trace', 'handoff'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: ActivityTypes =\n * <ActivityTypes>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nvar ActivityTypes;\n(function (ActivityTypes) {\n    ActivityTypes[\"Message\"] = \"message\";\n    ActivityTypes[\"ContactRelationUpdate\"] = \"contactRelationUpdate\";\n    ActivityTypes[\"ConversationUpdate\"] = \"conversationUpdate\";\n    ActivityTypes[\"Typing\"] = \"typing\";\n    ActivityTypes[\"EndOfConversation\"] = \"endOfConversation\";\n    ActivityTypes[\"Event\"] = \"event\";\n    ActivityTypes[\"Invoke\"] = \"invoke\";\n    ActivityTypes[\"DeleteUserData\"] = \"deleteUserData\";\n    ActivityTypes[\"MessageUpdate\"] = \"messageUpdate\";\n    ActivityTypes[\"MessageDelete\"] = \"messageDelete\";\n    ActivityTypes[\"InstallationUpdate\"] = \"installationUpdate\";\n    ActivityTypes[\"MessageReaction\"] = \"messageReaction\";\n    ActivityTypes[\"Suggestion\"] = \"suggestion\";\n    ActivityTypes[\"Trace\"] = \"trace\";\n    ActivityTypes[\"Handoff\"] = \"handoff\";\n})(ActivityTypes = exports.ActivityTypes || (exports.ActivityTypes = {}));\n/**\n * Defines values for TextFormatTypes.\n * Possible values include: 'markdown', 'plain', 'xml'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: TextFormatTypes =\n * <TextFormatTypes>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nvar TextFormatTypes;\n(function (TextFormatTypes) {\n    TextFormatTypes[\"Markdown\"] = \"markdown\";\n    TextFormatTypes[\"Plain\"] = \"plain\";\n    TextFormatTypes[\"Xml\"] = \"xml\";\n})(TextFormatTypes = exports.TextFormatTypes || (exports.TextFormatTypes = {}));\n/**\n * Defines values for AttachmentLayoutTypes.\n * Possible values include: 'list', 'carousel'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: AttachmentLayoutTypes =\n * <AttachmentLayoutTypes>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nvar AttachmentLayoutTypes;\n(function (AttachmentLayoutTypes) {\n    AttachmentLayoutTypes[\"List\"] = \"list\";\n    AttachmentLayoutTypes[\"Carousel\"] = \"carousel\";\n})(AttachmentLayoutTypes = exports.AttachmentLayoutTypes || (exports.AttachmentLayoutTypes = {}));\n/**\n * Defines values for MessageReactionTypes.\n * Possible values include: 'like', 'plusOne'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: MessageReactionTypes =\n * <MessageReactionTypes>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nvar MessageReactionTypes;\n(function (MessageReactionTypes) {\n    MessageReactionTypes[\"Like\"] = \"like\";\n    MessageReactionTypes[\"PlusOne\"] = \"plusOne\";\n})(MessageReactionTypes = exports.MessageReactionTypes || (exports.MessageReactionTypes = {}));\n/**\n * Defines values for InputHints.\n * Possible values include: 'acceptingInput', 'ignoringInput', 'expectingInput'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: InputHints = <InputHints>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nvar InputHints;\n(function (InputHints) {\n    InputHints[\"AcceptingInput\"] = \"acceptingInput\";\n    InputHints[\"IgnoringInput\"] = \"ignoringInput\";\n    InputHints[\"ExpectingInput\"] = \"expectingInput\";\n})(InputHints = exports.InputHints || (exports.InputHints = {}));\n/**\n * Defines values for ActionTypes.\n * Possible values include: 'openUrl', 'imBack', 'postBack', 'playAudio',\n * 'playVideo', 'showImage', 'downloadFile', 'signin', 'call', 'payment',\n * 'messageBack'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: ActionTypes =\n * <ActionTypes>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nvar ActionTypes;\n(function (ActionTypes) {\n    ActionTypes[\"OpenUrl\"] = \"openUrl\";\n    ActionTypes[\"ImBack\"] = \"imBack\";\n    ActionTypes[\"PostBack\"] = \"postBack\";\n    ActionTypes[\"PlayAudio\"] = \"playAudio\";\n    ActionTypes[\"PlayVideo\"] = \"playVideo\";\n    ActionTypes[\"ShowImage\"] = \"showImage\";\n    ActionTypes[\"DownloadFile\"] = \"downloadFile\";\n    ActionTypes[\"Signin\"] = \"signin\";\n    ActionTypes[\"Call\"] = \"call\";\n    ActionTypes[\"Payment\"] = \"payment\";\n    ActionTypes[\"MessageBack\"] = \"messageBack\";\n})(ActionTypes = exports.ActionTypes || (exports.ActionTypes = {}));\n/**\n * Defines values for EndOfConversationCodes.\n * Possible values include: 'unknown', 'completedSuccessfully',\n * 'userCancelled', 'botTimedOut', 'botIssuedInvalidMessage', 'channelFailed'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: EndOfConversationCodes =\n * <EndOfConversationCodes>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nvar EndOfConversationCodes;\n(function (EndOfConversationCodes) {\n    EndOfConversationCodes[\"Unknown\"] = \"unknown\";\n    EndOfConversationCodes[\"CompletedSuccessfully\"] = \"completedSuccessfully\";\n    EndOfConversationCodes[\"UserCancelled\"] = \"userCancelled\";\n    EndOfConversationCodes[\"BotTimedOut\"] = \"botTimedOut\";\n    EndOfConversationCodes[\"BotIssuedInvalidMessage\"] = \"botIssuedInvalidMessage\";\n    EndOfConversationCodes[\"ChannelFailed\"] = \"channelFailed\";\n})(EndOfConversationCodes = exports.EndOfConversationCodes || (exports.EndOfConversationCodes = {}));\n/**\n * Defines values for ActivityImportance.\n * Possible values include: 'low', 'normal', 'high'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: ActivityImportance =\n * <ActivityImportance>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nvar ActivityImportance;\n(function (ActivityImportance) {\n    ActivityImportance[\"Low\"] = \"low\";\n    ActivityImportance[\"Normal\"] = \"normal\";\n    ActivityImportance[\"High\"] = \"high\";\n})(ActivityImportance = exports.ActivityImportance || (exports.ActivityImportance = {}));\n/**\n * Defines values for DeliveryModes.\n * Possible values include: 'normal', 'notification'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: DeliveryModes =\n * <DeliveryModes>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nvar DeliveryModes;\n(function (DeliveryModes) {\n    DeliveryModes[\"Normal\"] = \"normal\";\n    DeliveryModes[\"Notification\"] = \"notification\";\n})(DeliveryModes = exports.DeliveryModes || (exports.DeliveryModes = {}));\n/**\n * Defines values for ContactRelationUpdateActionTypes.\n * Possible values include: 'add', 'remove'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: ContactRelationUpdateActionTypes =\n * <ContactRelationUpdateActionTypes>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nvar ContactRelationUpdateActionTypes;\n(function (ContactRelationUpdateActionTypes) {\n    ContactRelationUpdateActionTypes[\"Add\"] = \"add\";\n    ContactRelationUpdateActionTypes[\"Remove\"] = \"remove\";\n})(ContactRelationUpdateActionTypes = exports.ContactRelationUpdateActionTypes || (exports.ContactRelationUpdateActionTypes = {}));\n/**\n * Defines values for InstallationUpdateActionTypes.\n * Possible values include: 'add', 'remove'\n * There could be more values for this enum apart from the ones defined here.If\n * you want to set a value that is not from the known values then you can do\n * the following:\n * let param: InstallationUpdateActionTypes =\n * <InstallationUpdateActionTypes>\"someUnknownValueThatWillStillBeValid\";\n * @readonly\n * @enum {string}\n */\nvar InstallationUpdateActionTypes;\n(function (InstallationUpdateActionTypes) {\n    InstallationUpdateActionTypes[\"Add\"] = \"add\";\n    InstallationUpdateActionTypes[\"Remove\"] = \"remove\";\n})(InstallationUpdateActionTypes = exports.InstallationUpdateActionTypes || (exports.InstallationUpdateActionTypes = {}));\n//# sourceMappingURL=index.js.map","class ConnectionStatus {\n  // The bot is unavailable or returned an error\n  public static BotError = new ConnectionStatus();\n  // currently trying to connect to the conversation\n  public static Connecting = new ConnectionStatus();\n  // the bot ended the conversation\n  public static Ended = new ConnectionStatus();\n  // last operation produced an error with an expired token. Possibly waiting for someone to supply a new one.\n  public static ExpiredToken = new ConnectionStatus();\n  // the initial attempt to connect to the conversation failed. No recovery possible.\n  public static FailedToConnect = new ConnectionStatus();\n  // a non-specific error occurred\n  public static IndeterminateError = new ConnectionStatus();\n  // successfully connected to the conversation. Connection is healthy so far as we know.\n  public static Online = new ConnectionStatus();\n  // the status when the DirectLine object is first created/constructed\n  public static Uninitialized = new ConnectionStatus();\n\n  /**\n   * Details about the error associated with this status.\n   */\n  public error?: { status: number, statusText: string };\n\n  constructor() {\n    if (Object.isFrozen(ConnectionStatus)) {\n      throw new Error('ConnectionStatus cannot be constructed')\n    }\n  }\n}\n\nObject.freeze(ConnectionStatus);\nexport { ConnectionStatus };","import { Activity, ActivityTypes } from 'botframework-schema';\nimport { ConnectionStatus } from './connectionStatus';\nimport { ActivityGroup, Conversation, DirectLineOptions } from './directLineTypes';\n\n/**\n * Node compatibility - This strategy hides\n * node-only dependencies from being bundled\n * in a browser based project even for dev builds.\n */\ndeclare var __NODE__: boolean;\nif (__NODE__) {\n  (new Function(`\n  if (!('FormData' in global)) {\n    global.FormData = require('form-data');\n  }\n\n  if (!('fetch' in global)) {\n    global.fetch = require('node-fetch');\n  }`))();\n}\n\n/**\n * The DirectLine class is an implementation of the\n * DirectLine APIs provided as part of the Azure Bot Services\n * that allows your client application to communicate with\n * your bot. This implementation provides some common usages\n * of the API including creating or reconnecting to a conversation,\n * token retrieval and refreshing, and sending/retrieving activities.\n */\nexport class DirectLine {\n  public referenceGrammarId: string;\n  private readonly domain: string;\n\n  private status = ConnectionStatus.Uninitialized;\n  private conversationId: string;\n  private isomorphicWS: { new(url: string, protocols?: string | string[]): WebSocket; };\n  private pendingResolvers: WeakMap<(value?: any) => void, Promise<any>> = new WeakMap();\n  private pollingInterval: number;\n  private resolver: (value?: any) => void;\n  private secret: string;\n  private socketConnection: WebSocket;\n  private streamUrl: string;\n  private token: string;\n  private useWebSocket: boolean;\n  private watermark = '';\n  private tokenRefreshTimer: any;\n\n  constructor(options: DirectLineOptions) {\n    const {\n      conversationId,\n      domain = 'https://directline.botframework.com/v3/directline',\n      isomorphicWS,\n      pollingInterval = 1000,\n      secret,\n      streamUrl,\n      token,\n      watermark,\n      useWebSocket,\n    } = options;\n\n    Object.assign(this, {\n      conversationId,\n      domain,\n      isomorphicWS,\n      pollingInterval,\n      secret,\n      streamUrl,\n      token,\n      watermark,\n      useWebSocket,\n    });\n  }\n\n  /**\n   * The generator that delivers Promises that resolve to\n   * either a ConnectionStatus object or an array of Activity\n   * objects. The iterator will continue to deliver Promises until\n   * end() is called.\n   *\n   * Consumers of the iterator must wait until the Promise is\n   * resolved before advancing the cursor.\n   *\n   * @example\n   * const directLine = new DirectLine(directLineOptions);\n   * async function directLineConsumer(directLine: DirectLine): void {\n   *   for (let promise: Promise<ConnectionStatus | Activity[]> of directLine) {\n   *     const result = await promise; // Resolved with a ConnectionStatus or an Array of Activity objects\n   *     if (result instanceof ConnectionStatus) {\n   *       // do connection status related things\n   *     } else if (result instanceof Array) {\n   *       // do activity related things\n   *     }\n   *     if (<some condition>) {\n   *        // Stop the loop manually\n   *       directLine.end();\n   *       break;\n   *     }\n   *   }\n   *   return true;\n   * }\n   *\n   * directLineConsumer(directLine).then(done => console.log('Conversation ended'));\n   */\n  public* [Symbol.iterator](): IterableIterator<Promise<ConnectionStatus | Activity[]>> {\n    while (this.status !== ConnectionStatus.Ended) {\n      // If we have a promise in queue, return it\n      let pendingPromise = this.pendingResolvers.get(this.resolver);\n      if (pendingPromise) {\n        yield pendingPromise;\n      }\n      // Otherwise, create a new one\n      pendingPromise = new Promise<ConnectionStatus | Activity[]>(async (resolve) => {\n        this.resolver = resolve;\n        this.pendingResolvers.set(resolve, pendingPromise);\n        // Attempt the initial connection - this status transition happens just once.\n        if (this.status === ConnectionStatus.Uninitialized) {\n          resolve(this.status = ConnectionStatus.Connecting);\n        } else {\n          const connection = await this.checkConnection();\n          if (connection) {\n            resolve(connection);\n          } else if (!this.useWebSocket) {\n            const pollResponse: ConnectionStatus | Activity[] = await this.poll();\n            resolve(pollResponse);\n          }\n        }\n      });\n\n      yield pendingPromise;\n    }\n  }\n\n  /**\n   * Posts an activity to the conversation. If a conversation does not\n   * exist, a new on is created. If a conversation exists but the\n   * connection has been lost, ana attempt to reconnect is made.\n   *\n   * @param {Activity} activity The Activity object to post to the conversation\n   */\n  public async postActivity(activity: Activity): Promise<string> {\n    const connectionStatus = await this.checkConnection();\n    if (connectionStatus === ConnectionStatus.FailedToConnect) {\n      const { status, statusText } = ConnectionStatus.FailedToConnect.error;\n      throw new Error(`${status}: ${statusText}`);\n    }\n\n    if (activity.type === ActivityTypes.Message && (activity.attachments || []).length) {\n      return this.postMessageWithAttachments(activity);\n    }\n\n    const { conversationId, domain, headers } = this;\n    headers['Content-type'] = 'application/json';\n    const url = `${domain}/conversations/${conversationId}/activities`;\n    const response = await fetch(url, { method: 'POST', body: JSON.stringify(activity), headers });\n\n    if (!response.ok) {\n      throw new Error(`${response.status}: ${response.statusText}`);\n    }\n    const { id } = await response.json();\n    return id;\n  }\n\n  /**\n   * Reconnects to the specified conversation\n   * and opens a socket to receive activities if\n   * the usage of a socket was specified in the\n   * DirectLineOptions\n   *\n   * @param {Conversation} conversation The conversation to reconnect to\n   */\n  public async reconnect(conversation: Conversation): Promise<ConnectionStatus> {\n    const { token, streamUrl } = conversation;\n    Object.assign(this, { token, streamUrl });\n    return this.checkConnection();\n  }\n\n  /**\n   * Ends the current conversation and closes\n   * the socket connection if one exists.\n   */\n  public end() {\n    if (this.socketConnection) {\n      this.socketConnection.close(1000);\n    }\n    this.resolver((this.status = ConnectionStatus.Ended));\n    // Normalize and prepare for a new conversation\n    this.status = ConnectionStatus.Uninitialized;\n  }\n\n  /**\n   * Gets the session ID of the current conversation.\n   * If a conversation has not yet been started, an\n   * attempt is made to start one before the session ID\n   * is returned. If an existing conversation was started\n   * but the connection has been lost, an attempt to\n   * reconnect is made.\n   */\n  public async getSesstionId(): Promise<string> {\n    const connectionStatus = await this.checkConnection();\n    if (connectionStatus === ConnectionStatus.FailedToConnect) {\n      throw new Error('Error: could not connect to the conversation');\n    }\n    const { domain, headers } = this;\n    const url = `${domain}/session/getsessionid`;\n    const response = await fetch(url, { headers, credentials: 'include' });\n    if (!response.ok) {\n      throw new Error(`${response.status}: ${response.statusText}`);\n    }\n    const { sessionId } = await response.json();\n    return sessionId;\n  }\n\n  /**\n   * Polls DirectLine for activities based on the pollingInterval\n   * specified in the DirectLineOptions. The promise is resolved\n   * only after new activities are received.\n   */\n  protected async poll(): Promise<Activity[] | ConnectionStatus> {\n    // Poll until we receive an error or a\n    // non-zero length array of activities.\n    while (this.status === ConnectionStatus.Online) {\n      await new Promise(resolve => setTimeout(resolve, this.pollingInterval));\n      const { conversationId, domain, headers, watermark } = this;\n      const url = `${ domain }/conversations/${ conversationId }/activities?watermark=${ watermark }`;\n      const response = await fetch(url, { headers });\n      if (!response.ok) {\n        return this.processError(response);\n      }\n      const { activities, watermark: advancedWatermark } = await response.json() as ActivityGroup;\n      this.watermark = advancedWatermark;\n\n      if ((activities || []).length) {\n        return activities;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Opens a socket connection to the streamUrl.\n   * This function is called when a conversation is\n   * created and the DirectLineOptions indicate the\n   * usage of a socket.\n   */\n  protected openSocketConnection(): Promise<ConnectionStatus> {\n    if (this.socketConnection) {\n      this.socketConnection.close(1000);\n    }\n    this.socketConnection = new this.isomorphicWS(this.streamUrl);\n\n    this.socketConnection.onmessage = (event: MessageEvent) => {\n      this.resolver(JSON.parse(event.data));\n    };\n\n    this.socketConnection.onclose = () => {\n      this.resolver(this.status = ConnectionStatus.Ended);\n    };\n\n    this.socketConnection.onerror = this.reconnectToConversation;\n\n    return new Promise(resolve => this.socketConnection.onopen = () => resolve(ConnectionStatus.Online));\n  }\n\n  /**\n   * Checks the connection to DirectLine and stats a new\n   * conversation if one does not already exist or connects\n   * to an existing conversation a conversationId is available.\n   */\n  protected async checkConnection(): Promise<ConnectionStatus> {\n    if (this.status === ConnectionStatus.Online) {\n      return null;\n    }\n    // If we're not online, attempt to connect\n    const response = await this.startConversation();\n    const { status, statusText } = response;\n    if (!response.ok) {\n      ConnectionStatus.FailedToConnect.error = { status, statusText };\n      return (this.status = ConnectionStatus.FailedToConnect);\n    }\n    const { conversationId, eTag, streamUrl, referenceGrammarId, token, expires_in } = await response.json() as Conversation;\n    Object.assign(this, { conversationId, token, streamUrl, eTag, referenceGrammarId });\n    if (!this.secret) {\n      this.refreshTokenHeartbeat(expires_in);\n    }\n    // We're socket enabled - connect with the streamUrl in the response\n    // and hand off the connection status update to the socket.\n    if (streamUrl && this.useWebSocket) {\n      return (this.status = await this.openSocketConnection());\n    }\n    // We're polling so assume an online status.\n    return (this.status = ConnectionStatus.Online);\n  }\n\n  /**\n   * Starts a new conversation or gets an existing\n   * conversation if an conversationId exists.\n   */\n  protected async startConversation(): Promise<Response> {\n    const { conversationId, domain, headers, watermark } = this;\n    let url = `${domain}/conversations`;\n    if (conversationId) {\n      url += `/${conversationId}?watermark=${watermark}`;\n    }\n    const method = conversationId ? 'GET' : 'POST';\n    return fetch(url, { method, headers });\n  }\n\n  /**\n   * Initiates a perpetual heartbeat tht refreshes the\n   * token at the specified expiry interval minus 60 seconds.\n   * This heartbeat dies when the connection status changes\n   * to anything other than ConnectionStatus.Online.\n   *\n   * @param {number} expiry The number of seconds before the\n   * token expires\n   */\n  protected refreshTokenHeartbeat(expiry: number): void {\n    if (this.tokenRefreshTimer) {\n      clearTimeout(this.tokenRefreshTimer);\n    }\n\n    const doTokenRefresh = async () => {\n      // Late check for the connection status in case\n      // it has changed since the timeout was initiated.\n      if (this.status === ConnectionStatus.Online) {\n        return null;\n      }\n      const url = `${this.domain}/tokens/refresh`;\n      const response = await fetch(url, { method: 'POST', headers: this.headers });\n      if (!response.ok) {\n        return this.processError(response);\n      }\n      const { token, expires_in } = await response.json() as Conversation;\n      this.token = token;\n      return this.refreshTokenHeartbeat(expires_in);\n    };\n    // refresh 60 seconds before expiration.\n    this.tokenRefreshTimer = setTimeout(doTokenRefresh, expiry - 60 * 60 * 1000);\n  }\n\n  /**\n   * Reconnects to the current conversation stream. This\n   * function is used to re-establish a socket connection if\n   * it was disconnected abruptly.\n   */\n  protected async reconnectToConversation(): Promise<ConnectionStatus> {\n    const { conversationId, domain, watermark, headers } = this;\n    const url = `${domain}/conversations/${conversationId}?watermark=${watermark}`;\n    const response = await fetch(url, { headers });\n    if (!response.ok) {\n      return this.processError(response);\n    }\n    const { token, streamUrl } = await response.json();\n    Object.assign(this, { token, streamUrl });\n    return (this.status = await this.openSocketConnection());\n  }\n\n  /**\n   * Maps an unsuccessful response to one of the enumerated\n   * Connection status objects and returns that object.\n   *\n   * @param {Response} response The Response object from an unsuccessful fetch operation.\n   */\n  protected processError(response: Response): ConnectionStatus {\n    const { status, statusText } = response;\n    let connectionStatus: ConnectionStatus;\n    switch (status) {\n\n      case 403:\n        connectionStatus = ConnectionStatus.ExpiredToken;\n        break;\n\n      case 404:\n        connectionStatus = ConnectionStatus.Ended;\n        break;\n\n      case 502:\n        connectionStatus = ConnectionStatus.BotError;\n        break;\n\n      default:\n        connectionStatus = ConnectionStatus.IndeterminateError;\n        break;\n    }\n    if (connectionStatus) {\n      connectionStatus.error = { status, statusText };\n    }\n    return (this.status = connectionStatus);\n  }\n\n  /**\n   * Posts message activities with attachments using the\n   * multipart/form-data protocol.\n   *\n   * @param {Attachment[]} attachments The array of Attachment to post\n   * @param {Activity} messageWithoutAttachments The Activity with the attachments stripped.\n   */\n  private async postMessageWithAttachments({ attachments, ... messageWithoutAttachments }: Activity): Promise<string> {\n    const body = new FormData();\n    body.append('activity', JSON.stringify(messageWithoutAttachments));\n\n    const attachmentResponses: Response[] = await Promise.all(attachments.map(attachment => fetch(attachment.contentUrl)));\n    attachmentResponses.forEach(async (response, index) => {\n      const blob = await response.blob();\n      const { name, contentUrl } = attachments[index];\n      const fileName = getFileNameFromPath(contentUrl);\n      body.append(name, blob, fileName);\n    });\n\n    const { domain, conversationId, headers } = this;\n    const url = `${domain}/conversations/${conversationId}/upload?userId=${messageWithoutAttachments.from.id}`;\n    const response = await fetch(url, { method: 'POST', headers, body });\n    if (response.status !== 200) {\n      return null;\n    }\n    const { id } = await response.json();\n    return id;\n  }\n\n  private get headers(): HeadersInit {\n    return {\n      'Accept': 'application/json',\n      'Authorization': `Bearer ${(this.secret || this.token)}`,\n    }\n  }\n}\n\n/**\n * Retrieves the file name from the specified path\n *\n * @param {string} path The path to retrieve the file name from\n */\nfunction getFileNameFromPath(path: string): string {\n  const index = path.lastIndexOf('/');\n  const targetIndex = index === -1 ? 0 : index;\n  return path.substr(targetIndex);\n}"],"sourceRoot":""}